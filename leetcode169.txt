给定一个大小为 n 的数组，找到其中的多数元素。多数元素是指在数组中出现次数 大于 ⌊ n/2 ⌋ 的元素。

你可以假设数组是非空的，并且给定的数组总是存在多数元素。

 

示例 1：

输入：[3,2,3]
输出：3
示例 2：

输入：[2,2,1,1,1,2,2]
输出：2
 

进阶：

尝试设计时间复杂度为 O(n)、空间复杂度为 O(1) 的算法解决此问题。


// class Solution {
// public:
//     int majorityElement(vector<int>& nums) {
//         //将数组排序 下标为nusm.size()/2的元素一定是众数，因为改题目确保众数存在
//         sort(nums.begin(),nums.end());
//         return nums[nums.size()/2];
//     }
// };


//哈希表法，将所有元素加入map种，元素为key，元素个数为value，打擂法跟新count，返回count最大的元素
class Solution {
public:
    int majorityElement(vector<int>& nums) {
        unordered_map<int,int> mp;
        int majority = 0;
        int count = 0;
        for(auto i : nums)
        {
            ++mp[i];
            if(mp[i]>count)
            {
                majority = i;
                count = mp[i];
            }
        }
        return majority;
    }
};